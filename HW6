{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ODE Boundary Value Problems"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The Shooting Method"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The shooting method solves boundary value problems (BVP) using initial value problem (IVP) solution methods and an initial guess of the derivative at the initial value of one side. This process then solves over to the other boundary value. The newly calculated boundary value is then checked against the desired boundary value. A second initial guess of the derivative is tried and a second solution over to the boundary value is performed. These values are then used to create a linear interpolation to find the desired value.\n",
    "\n",
    "## General formulation\n",
    "\n",
    "### Boundary Value Problem\n",
    "\n",
    "$$\\frac{d^2y}{dx^2}=f(x,y,\\frac{dy}{dx})$$\n",
    "\n",
    "$$y(a)=y_a, \\space \\space \\space \\space y(b)=y_b$$\n",
    "\n",
    "### Equavalent Initial Value Problem\n",
    "\n",
    "$$y(a)=y_a, \\space \\space \\space \\space y'(a)=Y_a$$\n",
    "\n",
    "where the value of $Y_a$ is a guess. This guess is used to solve for $y(b)=p$ where $p$ is the boundary calculated with the guess value. If $p$ is equal to $y_b$ then the calculation would end. However this is improbable. Therefore we would make a second guess we will call $Z_a$, so setting $y'(a)=Z_a$ we will solve and find a second value of $y(b)$ we will call $q$, therefore $y(b)=q$.\n",
    "\n",
    "These calculated values of $p$ and $q$ can be used to solve for the actual value of $y'(a)$ to satisfy $y(b)=y_b$ with linear interpolation. This interpolated value of $y'(a)$ is then used to solve the problem."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example\n",
    "\n",
    "$$\\frac{d^2y}{dx^2}-2y=8x(9-x)$$\n",
    "\n",
    "$$y(0)=0, \\space \\space \\space \\space y(9)=0$$\n",
    "\n",
    "### Rearrange\n",
    "\n",
    "$$\\frac{d^2y}{dx^2}=2y+8x(9-x)$$\n",
    "\n",
    "### Redefine as two first order ODEs\n",
    "\n",
    "$$\\frac{dy}{dx}=z=f_1(x,y,z)$$\n",
    "\n",
    "$$\\frac{dz}{dx}=2y+8x(9-x)=f_2(x,y,z)$$\n",
    "\n",
    "$$y(0)=0$$\n",
    "\n",
    "### Create an initial guess at derivative at $x=0$.\n",
    "\n",
    "$$z(0)=\\frac{dy}{dx}=4 \\space \\space (guess)$$ "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f1(x,y,z): return z\n",
    "def f2(x,y,z): return 2*y+8*x*(9-x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Define initial conditions and step size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   x  y  z\n",
       "0  0  0  4"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x0 = 0\n",
    "y0 = 0\n",
    "z0 = 4 #Y_a which is a guess value\n",
    "Y_a = z0\n",
    "h = 3       #This is defined by the user\n",
    "import pandas as pd\n",
    "df = pd.DataFrame({'x':[x0],'y':[y0],'z':z0})\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Perform first step calculation\n",
    "\n",
    "$$x_1=x_0+h$$\n",
    "\n",
    "$$y_1=y_0+f_1(x_0,y_0,z_0)h$$\n",
    "\n",
    "$$z_1=z_0+f_2(x_0,y_0,z_0)h$$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   x   y  z\n",
       "0  0   0  4\n",
       "1  3  12  4"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x1 = x0+h\n",
    "y1 = y0+f1(x0,y0,z0)*h\n",
    "z1 = z0+f2(x0,y0,z0)*h\n",
    "\n",
    "df = df.append({'x':x1,'y':y1,'z':z1},ignore_index=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6</td>\n",
       "      <td>24</td>\n",
       "      <td>508</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   x   y    z\n",
       "0  0   0    4\n",
       "1  3  12    4\n",
       "2  6  24  508"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x2 = x1+h\n",
    "y2 = y1+f1(x1,y1,z1)*h\n",
    "z2 = z1+f2(x1,y1,z1)*h\n",
    "df = df.append({'x':x2,'y':y2,'z':z2},ignore_index=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6</td>\n",
       "      <td>24</td>\n",
       "      <td>508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9</td>\n",
       "      <td>1548</td>\n",
       "      <td>1084</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   x     y     z\n",
       "0  0     0     4\n",
       "1  3    12     4\n",
       "2  6    24   508\n",
       "3  9  1548  1084"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x3 = x2+h\n",
    "y3 = y2+f1(x2,y2,z2)*h\n",
    "z3 = z2+f2(x2,y2,z2)*h\n",
    "p = y3\n",
    "df = df.append({'x':x3,'y':y3,'z':z3},ignore_index=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Initial results\n",
    "At $x=9$, $y(9)=1548=p$ which is not $y(9)=0$. Therefore create a second guess of the derivative, let $z_0=-24$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-24</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   x  y   z\n",
       "0  0  0 -24"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x0 = 0\n",
    "y0 = 0\n",
    "z0 = -24 #Z_a\n",
    "Z_a = z0\n",
    "h = 3       #This is defined by the user\n",
    "df = pd.DataFrame({'x':[x0],'y':[y0],'z':z0})\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>-72</td>\n",
       "      <td>-24</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   x   y   z\n",
       "0  0   0 -24\n",
       "1  3 -72 -24"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x1 = x0+h\n",
    "y1 = y0+f1(x0,y0,z0)*h\n",
    "z1 = z0+f2(x0,y0,z0)*h\n",
    "df = df.append({'x':x1,'y':y1,'z':z1},ignore_index=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>-72</td>\n",
       "      <td>-24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6</td>\n",
       "      <td>-144</td>\n",
       "      <td>-24</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   x    y   z\n",
       "0  0    0 -24\n",
       "1  3  -72 -24\n",
       "2  6 -144 -24"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x2 = x1+h\n",
    "y2 = y1+f1(x1,y1,z1)*h\n",
    "z2 = z1+f2(x1,y1,z1)*h\n",
    "df = df.append({'x':x2,'y':y2,'z':z2},ignore_index=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>-72</td>\n",
       "      <td>-24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6</td>\n",
       "      <td>-144</td>\n",
       "      <td>-24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9</td>\n",
       "      <td>-216</td>\n",
       "      <td>-456</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   x    y    z\n",
       "0  0    0  -24\n",
       "1  3  -72  -24\n",
       "2  6 -144  -24\n",
       "3  9 -216 -456"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x3 = x2+h\n",
    "y3 = y2+f1(x2,y2,z2)*h\n",
    "z3 = z2+f2(x2,y2,z2)*h\n",
    "q = y3\n",
    "df = df.append({'x':x3,'y':y3,'z':z3},ignore_index=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Second guess results\n",
    "At $x=9$, $y(9)=-216=q$ which is not $y(9)=0$. Therefore perform an interpolation to find the actual value of the derivative."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Interpolation\n",
    "\n",
    "$$y'(a) = Y_a+\\frac{Y_a-Z_a}{p-q}(p_{des}-p)$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-20.57142857142857"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pdes = 0\n",
    "\n",
    "yprime = Y_a+((Y_a-Z_a)/(p-q))*(pdes-p)\n",
    "yprime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-20.571429</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   x  y          z\n",
       "0  0  0 -20.571429"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x0 = 0\n",
    "y0 = 0\n",
    "z0 = yprime\n",
    "Z_a = z0\n",
    "h = 3       #This is defined by the user\n",
    "df = pd.DataFrame({'x':[x0],'y':[y0],'z':z0})\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-20.571429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.0</td>\n",
       "      <td>-61.714286</td>\n",
       "      <td>-20.571429</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     x          y          z\n",
       "0  0.0   0.000000 -20.571429\n",
       "1  3.0 -61.714286 -20.571429"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x1 = x0+h\n",
    "y1 = y0+f1(x0,y0,z0)*h\n",
    "z1 = z0+f2(x0,y0,z0)*h\n",
    "df = df.append({'x':x1,'y':y1,'z':z1},ignore_index=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-20.571429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.0</td>\n",
       "      <td>-61.714286</td>\n",
       "      <td>-20.571429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6.0</td>\n",
       "      <td>-123.428571</td>\n",
       "      <td>41.142857</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     x           y          z\n",
       "0  0.0    0.000000 -20.571429\n",
       "1  3.0  -61.714286 -20.571429\n",
       "2  6.0 -123.428571  41.142857"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x2 = x1+h\n",
    "y2 = y1+f1(x1,y1,z1)*h\n",
    "z2 = z1+f2(x1,y1,z1)*h\n",
    "df = df.append({'x':x2,'y':y2,'z':z2},ignore_index=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>-20.571429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.0</td>\n",
       "      <td>-6.171429e+01</td>\n",
       "      <td>-20.571429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6.0</td>\n",
       "      <td>-1.234286e+02</td>\n",
       "      <td>41.142857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9.0</td>\n",
       "      <td>1.278977e-13</td>\n",
       "      <td>-267.428571</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     x             y           z\n",
       "0  0.0  0.000000e+00  -20.571429\n",
       "1  3.0 -6.171429e+01  -20.571429\n",
       "2  6.0 -1.234286e+02   41.142857\n",
       "3  9.0  1.278977e-13 -267.428571"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x3 = x2+h\n",
    "y3 = y2+f1(x2,y2,z2)*h\n",
    "z3 = z2+f2(x2,y2,z2)*h\n",
    "q = y3\n",
    "df = df.append({'x':x3,'y':y3,'z':z3},ignore_index=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Results\n",
    "It can be seen that $y(9)=0$ or sufficiently close. Therefore the equation is solved."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example using solve_bvp function\n",
    "\n",
    "## $$ y''+ke^y=0$$\n",
    "\n",
    "## $$y(0)=y(1)=0$$\n",
    "\n",
    "Assume $k=1$.\n",
    "\n",
    "First we need to rewrite the equation as a system of two first order equations.\n",
    "\n",
    "## $$y_1'=y_2 $$\n",
    "\n",
    "## $$y_2'=-e^{y_1}$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Define the function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fun(x,y):\n",
    "    return np.vstack((y[1],-np.exp(y[0])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Implement evaluation of the boundary condition residuals:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def bc(ya,yb):\n",
    "    return np.array([ya[0],yb[0]])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Define an initial mesh with 5 nodes between 0 and 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.linspace(0,1,5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### This problem is known to have two solutions, therefore we need two initial guesses (we will call a and b), a guess will be set to 0 and b to 3."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_a = np.zeros((2, x.size))\n",
    "y_b = np.zeros((2, x.size))\n",
    "y_b[0] = 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Now run the solver"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.integrate import solve_bvp\n",
    "res_a = solve_bvp(fun, bc, x, y_a)\n",
    "res_b = solve_bvp(fun, bc, x, y_b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot the solutions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_plot = np.linspace(0, 1, 100)\n",
    "y_plot_a = res_a.sol(x_plot)[0]\n",
    "y_plot_b = res_b.sol(x_plot)[0]\n",
    "import matplotlib.pyplot as plt\n",
    "plt.plot(x_plot, y_plot_a, label='y_a')\n",
    "plt.plot(x_plot, y_plot_b, label='y_b')\n",
    "plt.legend()\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"y\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Eigenvalue problem"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Consider the set of equations:\n",
    "\n",
    "### $$\\frac{dy_1}{dt}=-5y_1+3y_2 $$\n",
    "\n",
    "### $$\\frac{dy_2}{dt}=100y_1+301y_2 $$\n",
    "\n",
    "with initial conditions\n",
    "\n",
    "### $$y_1(0)=52.29$$\n",
    "\n",
    "### $$y_2(0)=83.82$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define a matrix to find the eigenvalues and eigenvectors\n",
    "\n",
    "$$\\begin{bmatrix}5-\\lambda & -3\\\\-100 & 301-\\lambda\\end{bmatrix}\\begin{Bmatrix}e_1\\\\e_2\\end{Bmatrix}=\\{0\\}$$\n",
    "\n",
    "where $\\lambda$ and $\\{e\\}$ are the eigenvalue and eigenvector respectively."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create matrix of values for coeffients in $a$, then solve for the eigenvalues."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = np.matrix([[5,-3],[-100,301]])\n",
    "[d,v]=np.linalg.eig(a)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The eigenvalues are"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  3.98993323, 302.01006677])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The eigenvectors are"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "matrix([[-0.94772493,  0.01010015],\n",
       "        [-0.31908849, -0.99994899]])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "v"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This would generate the general solutions as follows:\n",
    "\n",
    "### $$y_1=c_{11}e^{-3.9899t}+c_{12}e^{-302.0101t}$$\n",
    "\n",
    "### $$y_1=c_{21}e^{-3.9899t}+c_{22}e^{-302.0101t}$$\n",
    "\n",
    "we can then solve using the initial conditions at $t=0$\n",
    "\n",
    "### $$e^{0}=1$$\n",
    "\n",
    "therefore\n",
    "\n",
    "### $$y_1(0)=52.29=c_{11}+c_{12}$$\n",
    "\n",
    "### $$y_2(0)=83.82=c_{21}+c_{22}$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can find the coeffients with the eigenvalues and eigenvectors with the initial conditions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "matrix([[52.95654426]])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c = np.matrix([[52.29],[83.82]])\n",
    "cc = np.linalg.inv(v)*c\n",
    "c11 = cc[0]*v[0,0]\n",
    "c11"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "matrix([[17.82988194]])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c21 = cc[0]*v[1,0]\n",
    "c21"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "matrix([[-0.66654426]])"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c12 = cc[1]*v[0,1]\n",
    "c12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "matrix([[65.99011806]])"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c22 = cc[1]*v[1,1]\n",
    "c22"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Therefore the solution is \n",
    "\n",
    "### $$y_1=52.96e^{-3.9899t}+0.67e^{-302.0101t}$$\n",
    "\n",
    "### $$y_1=17.83e^{-3.9899t}+65.99e^{-302.0101t}$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Homework \n",
    "\n",
    "## Try to use the Secant method to solve this problem. Use the PDF for guidance and try to repurpose its code.\n",
    "\n",
    "$$\\frac{d^2y}{dx^2}-2y=8x(9-x)$$\n",
    "\n",
    "$$y(0)=0, \\space \\space \\space \\space y(9)=0$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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BocTiUhOUJF7ma5du9KrVy/S0tJo3rw5Bw8edDqSiGQzFbkXGjt2LI0bNyYpKYkmTZpw6tQppyOJSDZSkXshX19fFixYQPny5fnuu+9o2bIlaWlpTscSkWyiIvdSgYGBfPzxx9x9992sXbuWV155xelIIpJNVORerFSpUixbtgx/f38mTZqkC2yJeCkVuZerUaMG06dPB+CFF17g008/dTiRiLhalorcGNPCGPONMSbDGBPiqlDiWh06dKBv376kpaURFRXFoUOHnI4kIi6U1SPyPUBzYKMLskg2GjVq1NWZLOHh4Zw+fdrpSCLiIlkqcmvtt9bafa4KI9nnykyWhx56iL1799K2bVvS09OdjiUiLpBjY+TGmK7GmARjTEJiYmJObVauERgYSGxsLP/zP//DihUrdKs4ES9xyyI3xqwzxuy5waPp7WzIWjvdWhtirQ0pVqzYnSeWLLn//vt/d02W+fPnOx1JRLLolkVura1nrS1/g0dMTgQU16tTpw4TJkwAoHPnznzxxRcOJxKRrND0w1yqZ8+edOnSheTkZCIiInR3IREPltXph82MMUeBx4A4Y4zuAuwhjDFMnjyZJ554guPHj9OsWTOSk5OdjiUidyCrs1aWWWuLW2vzWmuDrLWhrgom2c/f358lS5ZQsmRJtm3bRo8ePbDWOh1LRG6ThlZyubvvvpvly5eTP39+Zs+ezaRJk5yOJCK3SUUuPPLII8yaNQuAV155hfXr1zucSERuh4pcAGjVqhUDBgwgPT2dli1bcvjwYacjiUgmqcjlqhEjRlw9jT8iIoKzZ886HUlEMkFFLlf5+voyf/58HnzwQb7++mueffZZffkp4gFU5PI7BQsWJCYmhsDAQKKjo3njjTecjiQit6Ailz948MEHWbBgAcYYBg8ezMcff+x0JBH5EypyuaHGjRszcuRIrLW0a9eO7777zulIInITKnK5qQEDBhAVFcXp06eJiIjgt99+czqSiNyAilxuyhjDrFmzqFChAvv27aNt27ZkZGQ4HUtErqMilz911113sXz5cgoXLkxcXBxDhgxxOpKIXEdFLrdUpkwZFi1ahI+PD6+//jpLlixxOpKIXENFLplSr149xo4dC1y6mfOePXscTiQiV6jIJdN69epF27ZtOXfuHE2bNiUpKcnpSCKCilxugzGGGTNmULlyZQ4fPkzr1q11A2cRN6Ail9uSP39+li1bRrFixVizZg0DBw50OpJIrqcil9tWsmRJFi9ejK+vL2+++SaLFi1yOpJIrqYilzvy5JNPMn78eACeffZZdu/e7XAikdxLRS537IUXXqBjx45cuHCBZs2a8csvvzgdSSRXUpHLHTPGMGXKFKpWrcp///tfWrVqRVpamtOxRHIdFblkSb58+ViyZAlBQUF88skn9OvXz+lIIrmOilyyrHjx4ixZsoQ8efIwfvx45s2b53QkkVxFRS4u8fjjjzNx4kQAunTpQkJCgsOJRHIPFbm4TLdu3ejSpQspKSk0a9aMn376yelIIrmCilxcxhjDpEmTqFGjBkePHiUqKoqLFy86HUvE66nIxaXy5s1LdHQ09957L5s3b+bll192OpKI11ORi8vdc889LF26FH9/f6ZMmcKMGTOcjiTi1VTkki2qVavGtGnTAHj++ef57LPPHE4k4r1U5JJtOnbsyIsvvkhqaiqRkZEcO3bM6UgiXklFLtnqrbfeok6dOpw4cYJmzZqRnJzsdCQRr5OlIjfGjDXGfGeM+coYs8wYU8hVwcQ75MmTh48++ohSpUrxxRdf0LVrV6y1TscS8SpZPSJfC5S31lYE9gMDsh5JvE2RIkWIiYkhICCAefPmXb1qooi4RpaK3Fq7xlp75SpJnwPFsx5JvFHFihWZO3cuAH379mXNmjUOJxLxHq4cI+8ErLrZi8aYrsaYBGNMQmJiogs3K54iMjKSwYMHk5GRQatWrThw4IDTkUS8grnVeKUxZh3w1xu8NMhaG3N5mUFACNDcZmIANCQkxOpaHLlTRkYGzZs3JyYmhuDgYD7//HMKFizodCwRj2CM2WGtDbn+eb9b/UFrbb1brLgD8BRQNzMlLrmbj48P8+bN47HHHuObb76hbdu2xMTE4Ovr63Q0EY+V1VkrYcCrQLi19rxrIom3K1CgALGxsRQuXJi4uDgGDRrkdCQRj5bVMfLJQAFgrTFmtzFmqgsySS5QpkyZqzdwHjNmDPPnz3c6kojHyuqslb9ba0tYaytdfnR3VTDxfnXq1GHChAkAPPfcc2zfvt3hRCKeSWd2iqN69uxJ9+7dSUlJISIiQqfxi9wBFbk4yhjDxIkTqVWrFj/++CMRERGcP6+vW0Ruh4pcHJcnTx6io6MpU6YMCQkJdOrUSafxi9wGFbm4hSJFihAbG0uBAgVYtGgRI0aMcDqSiMdQkYvbKFeuHAsXLsQYw9ChQ1m8eLHTkUQ8gopc3Erjxo0ZO3YsAB06dEBnAIvcmopc3M4rr7xCp06duHDhAk2bNtVMFpFbUJGL2zHGMGXKFGrWrMnx48dp0qQJ586dczqWiNtSkYtb8vf3Z+nSpdx///3s2rWLdu3akZGR4XQsEbekIhe3VaRIEVasWEHBggVZvnw5AwboviUiN6IiF7cWHBzMkiVL8PPz48033+S9995zOpKI21GRi9urW7cuU6ZMAaBHjx6sX7/e4UQi7kVFLh6hc+fO9OvXj7S0NCIjI9m7d6/TkUTchopcPMaoUaOIjIzkt99+o1GjRpw4ccLpSCJuQUUuHsPHx4e5c+dStWpVjhw5Qnh4uC6wJYKKXDxMQEAAsbGxlC5dmi+++II2bdqQnp7udCwRR6nIxeMEBQURFxdHoUKFiImJ4ZVXXtHVEiVXU5GLRypbtizLli3D39+fiRMnMn78eKcjifyp48eP06BBAw4dOuTydavIxWPVqlWL2bNnA9C7d29dLVHcVnJyMs2bN2ft2rX06dPH5etXkYtHa926NaNHjwbgmWeeYePGjQ4nEvk9ay3du3dn27Zt3HfffUyfPt3l21CRi8fr168fPXv2JCUlhaZNm7Jnzx6nI4lcNXHiRObMmUNAQADLly+nWLFiLt+Gilw83pX7fkZERHDq1CnCwsL44YcfnI4lwrp16+jduzcAs2fPplKlStmyHRW5eAVfX18WLFjA448/zrFjxwgLCyMpKcnpWJKL7du3jxYtWpCens6gQYNo0aJFtm1LRS5eI3/+/MTGxvLQQw+xd+9enTAkjklKSqJJkyacOnWKiIgIhg8fnq3bU5GLVylcuDDx8fEUL16cLVu20LJlS1JTU52OJblIamoqLVu25MCBA1SqVIl58+bh45O9VasiF69TokQJ1qxZQ+HChYmLi6Nz5866KYXkCGst//rXv1i/fj1BQUHExsZy1113Zft2VeTilcqWLcvKlSsJCAhg7ty59OnTR2d/SrZ7++23mTZtGvny5SMmJoYSJUrkyHZV5OK1qlWrxtKlS8mTJw/jx4/n9ddfdzqSeLElS5bQt29fAObOnUu1atVybNsqcvFqoaGhfPDBBxhjGDx4MJMnT3Y6knih7du3065dOwBGjx6drTNUbkRFLl6vZcuWV8+m+9e//sXcuXMdTiTe5NChQzz11FMkJyfz3HPP0a9fvxzPkKUiN8aMMMZ8ZYzZbYxZY4y511XBRFypc+fOjB07FoBnn32W6OhohxOJN0hMTCQsLIzExEQaNGjAlClTMMbkeI6sHpGPtdZWtNZWAlYAQ1yQSSRb9OnThyFDhpCRkUHr1q2Ji4tzOpJ4sPPnz9OkSRMOHjzII488QnR0NHny5HEkS5aK3Fp7+ppf/wJoWoC4tWHDhtG7d++r9/5ct26d05HEA6WlpfH0009fvRBWXFwcBQoUcCxPlsfIjTGvG2N+ANryJ0fkxpiuxpgEY0xCYmJiVjcrckeMMYwdO5YePXqQkpJCeHg4GzZscDqWeBBrLV26dOHjjz++egLaPffc42imWxa5MWadMWbPDR5NAay1g6y1JYD5wAs3W4+1drq1NsRaG5IdV/8SySxjDJMnT6ZTp05cuHCBxo0bs2nTJqdjiYfo378/s2fPJiAggLi4OIKDg52OhN+tFrDW1svkuhYAccDQLCUSyQE+Pj7MmDGD9PR05syZQ6NGjVi9ejU1atRwOpq4sbfeeos333wTPz8/lixZQvXq1Z2OBGR91so/rvk1HPgua3FEco6Pjw8zZ86kXbt2nD17ltDQUDZv3ux0LHFT06dPv3rCz5w5cwgLC3M40f/L6hj56MvDLF8BDYCXXJBJJMf4+voye/Zs2rRpw9mzZwkLC9NdhuQPFixYQPfu3QF45513aNOmjcOJfu+WQyt/xlob6aogIk7x9fVl7ty5+Pr6Mm/ePBo2bMiKFSuoXbu209HEDcTExNC+fXustYwePZqePXs6HekPdGanCJfKfNasWXTs2JHz58/TqFEj4uPjnY4lDlu5ciUtW7YkPT2dgQMH8uqrrzod6YZU5CKX+fr6MnPmTLp06UJycjLh4eEsX77c6VjikNWrV9O8eXMuXrzIiy++yMiRI52OdFMqcpFr+Pj4MG3aNF566SVSU1OJiopiwYIFTseSHLZ+/XoiIiJISUmhZ8+e/O///q8jp95nlopc5DrGGMaPH8+gQYNIT0+nXbt2TJkyxelYkkPWrFlz9SJYXbt2ZdKkSW5d4qAiF7khYwwjR45k9OjRWGvp2bMnI0aM0M0pvNzKlSsJDw8nOTmZzp07M2XKlGy/TZsruH9CEQe9+uqrTJ8+HR8fH4YMGcLLL7+s28Z5qdjY2KvDKT169GDatGkeUeKgIhe5pS5durBo0SL8/f2ZOHEirVu3Jjk52elY4kILFy4kMjKS1NRUXnrpJd555x2PKXFQkYtkSlRUFKtWrSIwMJCPPvqI0NBQfv31V6djiQtMnTqVtm3bkpaWxquvvsr48ePdfkz8eipykUyqU6cOmzZt4t5772Xjxo3885//5MiRI07Hkjt05QSfHj16YK1l1KhRjB492uNKHFTkIrelYsWKbN26lYceeohvvvmGatWqsX37dqdjyW3KyMigV69eDBgwAGMMU6ZMoX///k7HumMqcpHbVLJkSbZs2ULdunX56aefePLJJ3XrOA+SnJzM008/zYQJE/D392fhwoVXr6PiqVTkInegUKFCrFq1is6dO5OcnEyLFi0YPny4ZrS4uaSkJMLCwli8eDGBgYHEx8fTqlUrp2NlmYpc5A7lyZOH6dOnM3bsWIwxDB06lJYtW3Lu3Dmno8kNHDhwgMcee4wNGzZw7733smnTJq+5MJqKXCQLjDH06dOHFStWEBgYyJIlS6hRowaHDx92OppcY8OGDVSvXp39+/df/Z6jYsWKTsdyGRW5iAs0atSIbdu28cADD/DVV19RpUoVVqxY4XQs4dINIerXr09SUhJPPfUUmzdvpmTJkk7HcikVuYiLBAcHs337dpo2bcqpU6do0qQJgwcPJj093elouVJKSgpdu3alW7dupKam0qtXL5YvX+7o3e6zi4pcxIUKFizI0qVLeeONN/Dx8WHkyJHUq1eP48ePOx0tVzl27Bi1a9dmxowZ5M2bl7lz5zJu3Dh8fX2djpYtVOQiLubj48OAAQNYs2YNQUFB/Oc//+Hhhx9m1apVTkfLFVavXk2lSpXYunUrJUqUYMuWLTzzzDNOx8pWKnKRbFK3bl2+/PJL6tevzy+//EKjRo14+eWXuXDhgtPRvFJaWhqDBw+mYcOG/PLLLzRo0ICEhASqVKnidLRspyIXyUZBQUHEx8fzxhtv4Ofnx4QJEwgJCWHXrl1OR/Mq33//PbVq1WLkyJEYYxgxYgSrVq3i7rvvdjpajlCRi2SzK0MtW7du5cEHH2Tv3r1Uq1aNESNGkJqa6nQ8j2atZe7cuTz88MNs2bKFe++9l7Vr1/Lvf//bo65emFW5Z09FHBYSEsLOnTt5/vnnSU1NZciQITz66KPs3LnT6Wge6cSJE0RFRdGhQwfOnDlD8+bN+eqrr6hTp47T0XKcilwkBwUEBDB58mQ++eQTypQpw5dffknVqlXp06cPZ8+edTqeR7DW8sEHH1CuXDmWLl3KXXfdxcyZM4mOjqZIkSJOx3OEilzEAbVr1+arr76iV69eZGRk8Pbbb1O2bFmWLl2q28n9iYMHD9KoUSOeeeYZkpKSaNCgAd988w2dOnXyyMvPuoqKXMQhf/nLXxg3bhzbt28nJCSEo0ePEhkZSWhoKHv27HE6nltJTk7mtddeo3z58sTHx1OwYEFmzpxJfHy8152leSdU5CIOCwkJ4fPPP+fdd9+lUKFCrF27locffpju3bvz008/OR3PUdZaPvzwQ4KDgxk2bBgpKSm0b9+effv25fqj8GupyEXcgK+vLz169ODgwYO88MILGGOYNm0aZcqUYeDAgbnytnKbNm3iscceo3Xr1hw5coQKFSqwYcMG5syZQ1BQkNPx3IqKXMSNFClShEmTJvH111/TpEkTzp8/z6hRoyhdujSvvfYaSUlJTkfMdlu3bqV+/frUrFmTbdu2ERQUxIwZM9i1axc1a9Z0Op5bUpGLuKGyZcsSGxvL1q1bqVu3Lr/99hvDhg2jZMmS9O7dm6NHjzod0aWstaxdu5YGDRpQo0YN1q1bR2BgIEOHDuXAgQN07tzZa6+T4hLW2hx/VKlSxYpI5v3nP/+xoaGhFrCA9fX1tVFRUXbDhg02IyPD6Xh37MKFC3bu3Lm2UqVKV/ftrrvusoMGDbInT550Op7bARLsDTrVJcUM9Ln8l1A0M8uryEXuzI4dO2yrVq2sr6/v1eIrV66cfeutt+yJEyecjpdp3377re3du7ctXLjw1f0ICgqyr7/+ugr8T9ysyI3N4pxVY0wJ4D0gGKhirf3lVn8mJCTEJiQkZGm7IrnZsWPHmDp1KtOmTSMxMRG49IVpaGgoLVq0IDw8nMKFCzuc8veOHTvGokWLWLBgATt27Lj6fOXKlenZsydt27YlX758DiZ0f8aYHdbakD8874IijwZGADFAiIpcJOdcvHiRuLg4Zs+eTVxc3NWbWPj5+fHkk08SFhZGaGgo5cuXz/GpemlpaezatYu4uDg+/vjj312KIDAwkBYtWtC9e3dCQv7QS3IT2VLkxphwoK619iVjzH/5kyI3xnQFugKULFmyypEjR+54uyLyRz///DPLli0jOjqaTz/99Hd3JgoKCqJGjRrUqFGDatWqUbFiRQoWLOjS7Z88eZJdu3aRkJDApk2b2LRpE2fOnLn6ev78+QkLC6Nt27Y0btxYR9934I6L3BizDvjrDV4aBAwEGlhrf7tVkV9LR+Qi2evkyZOsWbOG1atXs3r1ak6cOPGHZUqUKEG5cuUoVaoU9913HyVKlKBo0aIULlyYQoUK4e/vj5+fH35+fiQnJ3PhwgXOnTtHYmIiP/30EydOnODw4cMcPHiQ/fv333Amzf3330+9evVo0qQJderUIX/+/Dmx+17L5UfkxpgKwBeXKkUAAASFSURBVHrg/OWnigPHgarW2j9+aq6hIhfJOdZaDhw4wGeffcbWrVtJSEhg7969JCcnu3Q7AQEBVKpUicqVK1OtWjVq1apF8eLFXbqN3C7bxsiv2cB/0RG5iEdIT0/n0KFDfPfddxw5coQjR47www8/8Ouvv5KUlMSpU6e4ePEiaWlppKWlkS9fPvLnz09AQABFixYlKCiIoKAgSpUqxT/+8Q/+/ve/U7p0ac31zmY3K3I/J8KIiLN8fX154IEHeOCBB5yOIi7gsiK31pZy1bpERCTzdIq+iIiHU5GLiHg4FbmIiIdTkYuIeDgVuYiIh1ORi4h4OBW5iIiHc9mZnbe1UWMSgTu9alZR4JZnj3q53P4e5Pb9B70HkDvfg/ustcWuf9KRIs8KY0zCjU5RzU1y+3uQ2/cf9B6A3oNraWhFRMTDqchFRDycJxb5dKcDuIHc/h7k9v0HvQeg9+AqjxsjFxGR3/PEI3IREbmGilxExMO5bZEbY8KMMfuMMQeNMf1v8HpeY8yiy69vM8aUyvmU2ScT+9/RGJNojNl9+dHZiZzZyRjzvjHmZ2PMnpu8bowxEy+/R18ZYyrndMbslIn9r2WM+e2az8CQnM6YnYwxJYwxnxpjvjXGfGOMeekGy3j1ZyDTrLVu9wB8gUNAGcAf+BJ46LplegJTL//8NLDI6dw5vP8dgclOZ83m96EmUBnYc5PXGwGrAANUB7Y5nTmH978WsMLpnNm4//cAlS//XADYf4N/B179Gcjsw12PyKsCB621h621F4EPgabXLdMUmHP552igrjHG5GDG7JSZ/fd61tqNQNKfLNIUmGsv+RwoZIy5J2fSZb9M7L9Xs9b+aK3defnnM8C3wN+uW8yrPwOZ5a5F/jfgh2t+P8of/wKvLmOtTQN+A4rkSLrsl5n9B4i8/N/JaGNMiZyJ5lYy+z55s8eMMV8aY1YZY8o5HSa7XB46fQTYdt1L+gzgvkV+oyPr6+dJZmYZT5WZffsYKGWtrQis4///d5KbePNnIDN2cunaGw8Dk4DlDufJFsaYu4AlwMvW2tPXv3yDP5KbPgOA+xb5UeDaI8ziwPGbLWOM8QMK4j3/Db3l/ltrT1prUy7/OgOokkPZ3ElmPidey1p72lp79vLPK4E8xpiiDsdyKWNMHi6V+Hxr7dIbLJKrPwNXuGuRfwH8wxhT2hjjz6UvM2OvWyYW6HD55yjgE3v52w8vcMv9v24cMJxL44e5TSzQ/vLMherAb9baH50OlVOMMX+98r2QMaYql/49n3Q2letc3reZwLfW2nE3WSxXfwau8HM6wI1Ya9OMMS8Aq7k0g+N9a+03xpjhQIK1NpZLf8HzjDEHuXQk/rRziV0rk/v/ojEmHEjj0v53dCxwNjHGLOTSzIyixpijwFAgD4C1diqwkkuzFg4C54FnnUmaPTKx/1FAD2NMGnABeNqLDmYAHgeeAb42xuy+/NxAoCTkjs9AZukUfRERD+euQysiIpJJKnIREQ+nIhcR8XAqchERD6ciFxHxcCpyEREPpyIXEfFw/wdMesezzemuCQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "from scipy.integrate import odeint\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "# y'' +4y = -9sin(x), y(0) = 1., y(3*pi/4.) = -(1.+3*sqrt(2))/2., y'(0) = -2\n",
    "# Exact Solution: y(x) = cos(2x) + (1/2)sin(2x) - 3sin(x)\n",
    "def find_t(f,a,b,alpha,beta,t0,t1,maxI):\n",
    "    sol1 = 0\n",
    "    i = 0\n",
    "    while abs(sol1-beta) > 10**-8 and i < maxI:\n",
    "        sol0 = odeint(f,np.array([alpha,t0]), [a,b],atol=1e-10)[1,0]\n",
    "        sol1 = odeint(f,np.array([alpha,t1]), [a,b],atol=1e-10)[1,0]\n",
    "        t2 = t1 - (sol1 - beta)*(t1-t0)/(sol1-sol0)\n",
    "        t0 = t1\n",
    "        t1 = t2\n",
    "        i = i+1\n",
    "    if i == maxI:\n",
    "        print(\"t not found\")\n",
    "    return t2\n",
    "\n",
    "def solveSecant(f,X,a,b,alpha,beta,t0,t1,maxI):\n",
    "    t = find_t(f,a,b,alpha,beta,t0,t1,maxI)\n",
    "    sol = odeint(f,np.array([alpha,t]), X,atol=1e-10)[:,0]\n",
    "    return sol\n",
    "\n",
    "def ode(y,x):\n",
    "    return np.array([y[1], -4*y[0]-9*np.sin(x)])\n",
    "\n",
    "X = np.linspace(0,3*np.pi/4,100)\n",
    "Y = solveSecant(ode,X,0,3*np.pi/4,1,-(1.+3*np.sqrt(2))/2,(1+(1.+3*np.sqrt(2))/2)/(-3*np.pi/4),-1,40)\n",
    "\n",
    "plt.plot(X,Y,'-k',linewidth=2)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "matrix([[  1,   0,   0,   0],\n",
       "        [  1, -20,   1,   0],\n",
       "        [  0,   1, -20,   1],\n",
       "        [  0,   0,   0,   1]])"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = np.matrix([[1,0,0,0],[1,-20,1,0],[0,1,-20,1],[0,0,0,1]])\n",
    "A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "matrix([[   0],\n",
       "        [1296],\n",
       "        [1296],\n",
       "        [   0]])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b = np.matrix([[0],[1296],[1296],[0]])\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = np.linalg.solve(A,b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x176c398c780>,\n",
       " <matplotlib.lines.Line2D at 0x176c398c8d0>]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = np.linspace(0,9,4)\n",
    "plt.plot(x,y,X,Y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
